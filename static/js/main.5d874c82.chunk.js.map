{"version":3,"sources":["window_utils.js","serviceWorker.js","js/reducers/dom.js","js/reducers/tasks.js","js/reducers/playbook.js","js/reducers/app.js","js/reducers/logs.js","js/reducers/combined.js","js/components/base_components/base_component.js","js/components/playbook/time_formatter.js","js/components/playbook/date_formatter.js","js/components/dashboard/dashboard_component.js","js/components/base_components/form_base_component.js","js/actions/playbooks_actions.js","js/components/playbook/new_playbook_form.js","js/components/playbook/playbook_list.js","js/components/playbook/active_task.js","js/actions/dom_actions.js","js/components/topNavigation.js","js/components/sideNavigation.js","js/components/sign_in.js","js/components/sign_up.js","js/components/reset_password.js","js/components/playbook/new_task_form.js","js/actions/task_actions.js","js/actions/laps_actions.js","js/components/playbook/lap_modal.js","js/components/playbook/task.js","js/components/playbook/playbook.js","js/routes.js","js/store.js","js/actions/logs_actions.js","js/firebase_helper.js","js/index.js"],"names":["window","utils","randStr","n","text","possible","i","charAt","Math","floor","random","length","keygen","Date","now","Boolean","location","hostname","match","actions","actionHandlers","TOGGLE_SIDENAV","state","show_sidenav_onsmallscreen","HIDE_SIDENAV","clone","data","JSON","parse","stringify","isApplicable","action","indexOf","TASK_ADD","type","task","description","estimate","status","interval","created_at","parseInt","tasks","clonedState","PLAYBOOK_ADD","playbook","title","PLAYBOOK_FILTER","map","id","playbookId","PLAYBOOK_HYDRATE","PLAYBOOK_UPDATE","key","CURRENT_PLAYBOOK","currentPlaybook","SET_ACTIVE_TASK","activeTask","REFRESH_LOGS","logs","combineReducers","dom","app","playbooks","BaseComponent","props","functionStringName","constructor","Array","this","Function","bind","funcName","React","Component","TimeFormatter","singleDigitToDoubleDigit","d","totalSec","timeInSeconds","color","hrs","min","sec","humanize","style","display","Humanize","className","DateFormatter","dt","milliseconds","moment","format","Dashboard","completedTasks","hover","responsive","scrollY","maxHeight","textWhite","rows","counter","taskKey","push","started_at","completed_at","duration","renderLogsRows","renderLogsTable","Base","connect","FormComponent","form","e","target","name","value","setState","PlaybookActions","callback","FB","addNewPlayBook","snap","setTimeout","books","NewPlaybookForm","_bind","preventDefault","submit","history","onSubmit","label","onChange","handleChange","onClick","Form","dispatch","add","withRouter","PlaybookList","loadPlaybook","event","launchPlaybook","playbookKey","removePlaybook","Object","keys","index","totalEstimates","totalTasks","taskKeys","forEach","cursor","icon","size","deletePlaybook","renderList","ActiveTask","updateRemainingTime","remainingTime","getTimeTaken","timerId","setInterval","clearInterval","pauseTask","componentWillUnmount","doneWithTask","fluid","middle","top","bottom","pause","done","timeTaken","laps","lapKey","lap","end","start","APP_GLOBALS","TIMESTAMP","DomActions","TopNavigation","collapse","innerWidth","light","expand","scrolling","toggleShowSideNav","toggleSideNav","SideNavigation","handleToggl","hideSideNav","isOpen","app_version","APP_VERSION","classNames","showSideNavOnSmallScreens","href","alt","src","to","signup","resetPassword","val","firebase","auth","signInWithEmailAndPassword","email","password","catch","error","code","errorMessage","message","alert","then","user","registerListeners","serverTimeStamp","change","login","SignUp","languageCode","createUserWithEmailAndPassword","recaptcha","RecaptchaVerifier","render","save","ResetPassword","promise","sendPasswordResetEmail","reset","NewTaskForm","showFormFlag","newCard","database","ServerValue","progress","addNewTask","dataset","card","margin","md","onClickCreateNew","data-key","handleUpdateCard","max","handleUpdateCardTime","onDiscardClick","onAddClick","renderCreateNewForm","renderCreateNewButton","TaskActions","startTask","markTaskDone","deleteTask","updateTask","LapActions","editLap","arg","LapModel","handleEdit","editing","handleSave","note","toggle","selected","showTimeSelect","getTime","dateFormat","valueDefault","centered","renderForm","renderDetails","renderToolBar","edit","Task","onDelete","delete","toggleLaps","lapsToggle","onUpdate","taskTitle","update","editTask","showLapsModel","startBtn","onStartProvider","endBtn","onDoneProvider","lapsBtn","renderStatus","renderEditButton","renderTitle","renderLaps","renderControlPanel","playListLoaded","Playbook","isTodoSelected","mobileTabToggle","listener","registerPlaybookListener","params","deRegisterPlaybookListener","filter","renderTodo","renderDone","role","todo","getPage","Top","Side","Main","getPageWithNavigation","component","MakePrivateRoute","SignInPage","SignUpPage","ResetPasswordPage","DashboardPage","NewPlaybookPage","ListPlaybookPage","PlaybookPage","Logout","signOut","getProviderWrapped","path","store","LogsActions","FirebaseHelper","db","next","refs","cb","uid","ref","userPlabooksEntry","newPlaybookForUser","playbookUserRef","users","playbooksEntry","set","once","console","log","err","FB_Listenters","on","listenForUserPlaybooks","listenForActiveTask","listenForLogs","snapshot","toJSON","refresh","hydrate","bookKeys","processKey","listenForPlaybook","off","remove","endLap","updateDoneLog","taskRef","doneLogsRef","child","taskEndTime","taskStartTime","Number","MAX_SAFE_INTEGER","taskDuration","newLap","ongoingLap","startLap","refStr","markTaskOngoing","markTaskPaused","playbookRef","createStore","combined","applyMiddleware","thunk","FirebaseHlpr","onAuthStateChanged","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d874c82.chunk.js","sourcesContent":["window.utils = {\n    randStr: (n) => {\n        var text = \"\";\n        var possible = \"abcdefghijklmnopqrstuvwxyz0123456789\";\n\n        for (var i = 0; i < n; i++)\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n        return text;\n    },\n\n    keygen: () => {\n        return Date.now() + '-' + window.utils.randStr(10)\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const actions = [\n    \"TOGGLE_SIDENAV\",\n    \"HIDE_SIDENAV\",\n];\n\nconst actionHandlers = {\n    TOGGLE_SIDENAV : toggleSidenav,\n    HIDE_SIDENAV : hideSidenav,\n}\n\nfunction toggleSidenav(state) {\n    state.show_sidenav_onsmallscreen = !state.show_sidenav_onsmallscreen;\n    return state;\n}\n\nfunction hideSidenav(state) {\n    state.show_sidenav_onsmallscreen = false;\n    return state;\n}\n\nfunction clone(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nfunction isApplicable(action) {\n    return actions.indexOf(action) > -1\n}\n\nexport default function dom(state = {show_sidenav_onsmallscreen:false}, action) {\n    let clonedState =clone(state);\n    if(isApplicable(action.type)){\n        return actionHandlers[action.type](clonedState,action);\n    }\n    return clonedState;\n}\n\n","const actions = [\n    \"TASK_ADD\",\n    \"TASK_START\",\n    \"TASK_DONE\"\n];\n\nconst actionHandlers = {\n    TASK_ADD : handleNew\n}\n\nfunction handleNew(state,action) {\n     delete(action.type)\n     let task = {\n         description : action.description,\n         estimate : action.estimate,\n         status : \"new\",\n         interval : 0,\n         created_at : parseInt(Date.now()/1000)\n     }\n     return [...state, task];\n}\n\n\nfunction isApplicable(action) {\n    return actions.indexOf(action) > -1\n}\n\nfunction clone(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport default function tasks(state = [], action) {\n    if(isApplicable(action.type)){\n        let clonedState = clone(state);\n        return actionHandlers[action.type](clonedState,action);\n    }\n    return state;\n}","import tasks from './tasks';\n\nconst actions = [\n    \"PLAYBOOK_HYDRATE\",\n    \"PLAYBOOK_ADD\",\n    \"PLAYBOOK_FILTER\",\n    \"TASK_ADD\",\n    \"PLAYBOOK_UPDATE\"\n];\n\nconst actionHandlers = {\n    PLAYBOOK_ADD: handleNew,\n    PLAYBOOK_FILTER: handleFilter,\n    TASK_ADD: handleAddTask,\n    PLAYBOOK_HYDRATE: handleHydrate,\n    PLAYBOOK_UPDATE: handleUpdate\n}\n\nfunction handleNew(state, action) {\n    let playbook = {\n        description: action.description,\n        title: action.title,\n        status: \"new\",\n        tasks: [],\n        created_at: parseInt(Date.now() / 1000)\n    }\n    return [...state, playbook];\n}\n\nfunction handleFilter(state, action) {\n    return state;\n}\n\nfunction handleAddTask(state, action) {\n    return state.map((playbook) => {\n        if (playbook.id === action.playbookId) {\n            playbook.tasks = tasks(playbook.tasks, action);\n        }\n        return playbook;\n    });\n}\n\nfunction handleHydrate(state, action) {\n    return action.data;\n}\n\nfunction handleUpdate(state, action) {\n    if(state[action.playbook.key]){\n        state[action.playbook.key] = action.playbook;\n    }\n    return state;\n}\n\nfunction isApplicable(action) {\n    return actions.indexOf(action) > -1\n}\n\n\nfunction clone(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport default function playbooks(state = [], action) {\n    let clonedState = clone(state);\n    if (isApplicable(action.type)) {\n        return actionHandlers[action.type](clonedState, action);\n    }\n\n    for(let key in clonedState){\n        clonedState[key].tasks = tasks(clonedState[key].tasks, action)\n    }\n\n    return clonedState;\n}\n\n","const actions = [\n    \"CURRENT_PLAYBOOK\",\n    \"SET_ACTIVE_TASK\"\n];\n\nconst actionHandlers = {\n    CURRENT_PLAYBOOK : currentPlaybook,\n    SET_ACTIVE_TASK : setActiveTask\n}\n\nfunction currentPlaybook(state,action) {\n    state.currentPlaybook = action.playbook.key;\n    return state;\n}\n\nfunction setActiveTask(state, action){\n    state.activeTask = action.activeTask\n    return state;\n}\n\nfunction clone(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nfunction isApplicable(action) {\n    return actions.indexOf(action) > -1\n}\n\nexport default function app(state = {currentPlaybook:null, activeTask:null}, action) {\n    let clonedState =clone(state);\n    if(isApplicable(action.type)){\n        return actionHandlers[action.type](clonedState,action);\n    }\n    return clonedState;\n}\n\n","const actions = [\n    \"REFRESH_LOGS\",\n];\n\nconst actionHandlers = {\n    REFRESH_LOGS : refreshLogs,\n}\n\nfunction refreshLogs(state,action) {\n    state = action.logs;\n    return state;\n}\n\nfunction isApplicable(action) {\n    return actions.indexOf(action) > -1\n}\n\nfunction clone(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport default function logs(state = {logs:{}}, action) {\n    let clonedState =clone(state);\n    if(isApplicable(action.type)){\n        return actionHandlers[action.type](clonedState,action);\n    }\n    return clonedState;\n}\n\n","import {combineReducers} from 'redux';\n\nimport dom from './dom';\nimport playbooks from './playbook';\nimport app from './app';\nimport logs from './logs';\n\n\nexport default combineReducers({\n    dom,\n    app,\n    playbooks,\n    logs\n})\n\n\n\n","import React from 'react';\n\nexport default class BaseComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    _bind(functionStringName) {\n        if (!functionStringName) {\n            return;\n        }\n\n        if (functionStringName.constructor === Array) {\n            functionStringName.map((funcName) => {\n                this[funcName] = this[funcName].bind(this);\n            });\n            return;\n        }\n        if (this[functionStringName].constructor === Function) {\n            this[functionStringName] = this[functionStringName].bind(this);\n            return;\n        }\n    }\n\n}\n","import React from 'react';\nimport Humanize from 'humanize-duration';\n\nexport default class TimeFormatter extends React.Component {\n    render() {\n        const singleDigitToDoubleDigit = (d) => {\n            return d < 10 ? \"0\" + d : d;\n        };\n\n        let totalSec = parseInt(this.props.timeInSeconds);\n        let color = this.props.color || \"green\";\n\n        if (totalSec < 0) {\n            color = \"red\";\n            totalSec = totalSec * -1;\n        }\n\n        let hrs = parseInt(totalSec / 3600);\n        let min = parseInt((totalSec % 3600) / 60);\n        let sec = parseInt((totalSec % 3600) % 60);\n\n        if(this.props.humanize) {\n            return <span style={{display: \"inline-block\", color: color}}>\n                {Humanize(totalSec * 1000)}\n            </span>\n        }\n\n        return <div style={{display: \"inline-block\", color: color}}>\n            <span className=\"time-hrs\">{singleDigitToDoubleDigit(hrs)}</span>\n            <span className=\"time-sep\">:</span>\n            <span className=\"time-min\">{singleDigitToDoubleDigit(min)}</span>\n            <span className=\"time-sep\">:</span>\n            <span className=\"time-sec\">{singleDigitToDoubleDigit(sec)}</span>\n        </div>\n    }\n}\n","import React from 'react';\nimport  moment from 'moment'\n\nexport default  class DateFormatter extends React.Component {\n    render() {\n        let dt = new Date(this.props.milliseconds);\n        dt = moment(dt)\n        return <div style={{display:\"inline-block\"}}>\n            {dt.format('DD/MM/YY hh:mmA')}\n        </div>\n    }\n}","import React from \"react\";\nimport {connect} from \"react-redux\";\n\nimport Base from \"../base_components/base_component\";\n\nimport {MDBCol, MDBContainer, MDBJumbotron, MDBRow, Table, TableBody, TableHead} from \"mdbreact\";\nimport TimeFormatter from \"../playbook/time_formatter\";\nimport DateFormatter from \"../playbook/date_formatter\";\n\nclass Dashboard extends Base {\n\n    renderLogsTable() {\n        let tasks = this.props.completedTasks;\n        const renderLogsRows = () => {\n            let rows = []\n            let counter = 1\n            for (let taskKey in tasks) {\n                let task = tasks[taskKey];\n                rows.push(<tr>\n                    <th>{counter++}</th>\n                    <th>{task.playbook}</th>\n                    <th>{task.task}</th>\n                    <th><DateFormatter milliseconds={task.created_at}/></th>\n                    <th><DateFormatter milliseconds={task.started_at}/></th>\n                    <th><DateFormatter milliseconds={task.completed_at}/></th>\n                    <th><TimeFormatter color={\"black\"} timeInSeconds={task.estimate}/></th>\n                    <th><TimeFormatter color={\"black\"} timeInSeconds={task.duration}/></th>\n                    <th><TimeFormatter timeInSeconds={(parseInt(task.estimate) - parseInt(task.duration))}/></th>\n                </tr>)\n            }\n            return rows\n        }\n        return <Table hover responsive scrollY maxHeight='50vh'>\n            <TableHead color={\"pink darken-3\"} textWhite>\n                <tr>\n                    <th>#</th>\n                    <th>Playbook Title</th>\n                    <th>Task Title</th>\n                    <th>Created On</th>\n                    <th>Started On</th>\n                    <th>Completed On</th>\n                    <th>Estimate</th>\n                    <th>Actual</th>\n                    <th>Deviation</th>\n                </tr>\n            </TableHead>\n            <TableBody>\n                {renderLogsRows()}\n            </TableBody>\n        </Table>\n    }\n\n\n    render() {\n\n        return <MDBContainer>\n            <MDBRow>\n                <MDBCol>\n                    <MDBJumbotron>\n                        <h1>Completed Tasks</h1>\n                        {this.renderLogsTable()}\n                    </MDBJumbotron>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    }\n}\n\nlet mapStateToProps = function (state) {\n    return {\n        completedTasks: (state.logs && state.logs.completedTasks) || null\n    }\n}\n\nexport default connect(mapStateToProps, null)(Dashboard);\n","import Base from './base_component';\n\nexport default class FormComponent extends Base {\n    constructor(props) {\n        super(props);\n        this.state.form = {}; //setting up empty form\n    }\n\n    handleChange(e) {\n        let form = this.state.form;\n        form[e.target.name] = e.target.value;\n        this.setState({form: form});\n    }\n}\n","export default class PlaybookActions {\n    static add(title, description, callback = () => null) {\n        window.FB.addNewPlayBook(title, description, (snap) => {\n            return setTimeout(function () {\n                callback(snap)\n            }, 0);\n        });\n    };\n\n    static hydrate(books) {\n        return {\n            type: \"PLAYBOOK_HYDRATE\",\n            data: books\n        }\n    }\n\n    static update(playbook) {\n        return {\n            type: \"PLAYBOOK_UPDATE\",\n            playbook: playbook\n        }\n    }\n}\n","import React from \"react\";\nimport {connect} from 'react-redux';\n\nimport Form from \"../base_components/form_base_component\";\nimport PlaybookActions from '../../actions/playbooks_actions'\nimport {MDBCol, MDBContainer, MDBJumbotron, MDBRow, MDBInput, MDBBtn} from \"mdbreact\";\nimport {withRouter} from \"react-router\";\n\n\nclass NewPlaybookForm extends Form {\n    constructor(props) {\n        super(props);\n        this._bind(['onSubmit', 'handleChange']);\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        // component delegation\n        return this.props.submit && this.props.submit(this.state.form, playbook=>this.props.history.push(`/playbook/${playbook.key}`));\n    }\n\n    handleChange(e) {\n        let form = this.state.form;\n        form[e.target.name] = e.target.value;\n        this.setState({form: form});\n    }\n\n    render() {\n        return  <MDBContainer>\n                <MDBRow>\n                    <MDBCol>\n                        <MDBJumbotron>\n                            <h2>New Playbook</h2>\n                            <form onSubmit={this.onSubmit}>\n                                <MDBInput label=\"Playbook Title\" name=\"title\" onChange={this.handleChange}/>\n                                <MDBInput label=\"Playbook Description\" name=\"description\" onChange={this.handleChange}/>\n                                <MDBBtn color=\"green\" onClick={this.onSubmit}>Create New Playbook</MDBBtn>\n                            </form>\n                        </MDBJumbotron>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>;\n    }\n}\n\nconst   mapDispatchToProps =  function(dispatch){\n    return {\n        submit: (form, callback) => {\n            PlaybookActions.add(form.title,form.description,callback)\n        }\n    }\n}\nexport default connect(null,mapDispatchToProps)(withRouter(NewPlaybookForm));\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport Base from \"../base_components/base_component\";\nimport {MDBBtn, MDBCol, MDBContainer, MDBIcon, MDBJumbotron, MDBRow, Table, TableBody, TableHead} from \"mdbreact\";\nimport TimeFormatter from \"./time_formatter\";\nimport {withRouter} from \"react-router-dom\";\n\nclass PlaybookList extends Base {\n\n    deletePlaybook(playbookKey){\n        return e=>{\n            window.FB.removePlaybook(playbookKey)\n        }\n    }\n\n    loadPlaybook = playbook=>event=>{\n        this.props.launchPlaybook(playbook,()=>this.props.history.push(`/playbook/${playbook.key}`));\n    }\n\n    renderList() {\n        let playbooks = null;\n\n        if (this.props.playbooks) {\n            playbooks = Object.keys(this.props.playbooks).map((playbookKey, index) => {\n                let playbook = this.props.playbooks[playbookKey];\n                let completedTasks = 0;\n                let totalEstimates = 0;\n                let totalTasks = 0\n                if (playbook.tasks) {\n                    let taskKeys = Object.keys(playbook.tasks);\n                    taskKeys.forEach((key) => {\n                        let task = playbook.tasks[key];\n                        if (task.status === \"done\") {\n                            completedTasks++;\n                        }\n                        totalEstimates += task.estimate;\n                    })\n                    totalTasks = taskKeys.length;\n                }\n                return <tr key={playbookKey}>\n                    <td>{index + 1}</td>\n                    <td onClick={this.loadPlaybook(playbook)} style={{cursor: \"pointer\"}}>{playbook.title} <MDBIcon icon=\"external-link\" /></td>\n                    <td>{totalTasks}</td>\n                    <td>{completedTasks}</td>\n                    <td><TimeFormatter timeInSeconds={totalEstimates}/></td>\n                    <td><MDBBtn size=\"sm\" color=\"red\" onClick={this.deletePlaybook(playbookKey)}><MDBIcon icon=\"trash\" /></MDBBtn></td>\n                </tr>\n            });\n        }\n\n        return <Table hover responsive scrollY maxHeight='50vh'>\n            <TableHead color={\"pink darken-3\"} textWhite>\n                <tr>\n                    <th>#</th>\n                    <th>Playbook Title</th>\n                    <th>Total Tasks</th>\n                    <th>Completed Tasks</th>\n                    <th>Estimates</th>\n                    <th></th>\n                </tr>\n            </TableHead>\n            <TableBody>\n                {playbooks}\n            </TableBody>\n        </Table>\n    }\n\n    render() {\n\n        return <MDBContainer>\n            <MDBRow>\n                <MDBCol>\n                    <MDBJumbotron>\n                        <h1>Playbooks</h1>\n                        {this.renderList()}\n                    </MDBJumbotron>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    }\n}\n\nlet mapStateToProps = function (state) {\n    return {\n        playbooks: state.playbooks\n    }\n}\n\nlet mapDispatchToProps = function (dispatch) {\n    return {\n        launchPlaybook: function (playbook, callback) {\n            dispatch({\n                type: \"CURRENT_PLAYBOOK\",\n                playbook\n            });\n            callback();\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(PlaybookList));\n","import React from 'react';\nimport Base from '../base_components/base_component';\nimport {MDBBtn, MDBCol, MDBContainer, MDBIcon, MDBRow} from 'mdbreact';\nimport TimeFormatter from \"./time_formatter\";\nimport {connect} from \"react-redux\";\n\nclass ActiveTask extends Base {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remainingTime: 0,\n        }\n        this._bind(['pause', 'done']);\n        this.timerId = null;\n    }\n\n    componentDidMount() {\n        this.timerId = setInterval(this.updateRemainingTime,1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerId)\n    }\n\n    updateRemainingTime = event=>{\n       let remainingTime =  this.props.activeTask && this.props.activeTask.estimate - ActiveTask.getTimeTaken(this.props.activeTask);\n       this.setState({remainingTime});\n    }\n\n    pause() {\n        window.FB.pauseTask(this.props.playbook, this.props.activeTask, this.componentWillUnmount);\n    }\n\n    done() {\n        window.FB.doneWithTask(this.props.playbook, this.props.activeTask, this.componentWillUnmount);\n    }\n\n   static getTimeTaken(task) {\n        let timeTaken = 0;\n        if (task.laps) {\n            for (let lapKey in task.laps) {\n                let lap = task.laps[lapKey];\n                if (lap.end && lap.start) {\n                    timeTaken += lap.end - lap.start;\n                }\n                if (lap.end === false && lap.start) {\n                    timeTaken += (window.APP_GLOBALS.TIMESTAMP * 1000) - lap.start;\n                }\n            }\n        }\n        return timeTaken / 1000;\n    }\n\n\n    render() {\n        let task = this.props.activeTask;\n        let playbook = this.props.playbook;\n        if (!(playbook && task)) {\n            return null\n        }\n        return <MDBContainer fluid>\n            <MDBRow middle className=\"active-task\">\n                <MDBCol size=\"2\" className=\"active-task playbook-title\">\n                    Playbook : {playbook.title}\n                </MDBCol>\n                <MDBCol size=\"8\">\n                    <MDBRow top>\n                        <MDBCol size=\"12\" className=\"active-task active-timer\">\n                            <TimeFormatter timeInSeconds={this.state.remainingTime}/>\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBRow bottom>\n                        <MDBCol size=\"12\" className=\"active-task title\">{task.title}</MDBCol>\n                    </MDBRow>\n                </MDBCol>\n                <MDBCol size=\"2\">\n                    <MDBBtn color=\"cyan\" size=\"sm\" onClick={this.pause}><MDBIcon icon=\"pause\"/></MDBBtn>\n                    <MDBBtn color=\"green\" size=\"sm\" onClick={this.done}><MDBIcon icon=\"stop\"/></MDBBtn>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>\n    }\n}\n\nlet mapStateToProps = function (state) {\n    let activeTask = null\n    let playbook = null\n    if (state.app.activeTask && state.playbooks[state.app.activeTask.playbook]) {\n        let taskKey = state.app.activeTask.task;\n        let playbookKey = state.app.activeTask.playbook;\n        activeTask = state.playbooks[playbookKey].tasks[taskKey];\n        activeTask.key = taskKey;\n        playbook = state.playbooks[playbookKey];\n    }\n    return {activeTask, playbook}\n}\n\nlet mapDispatchToProps = function (dispatch) {\n    return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActiveTask);\n","export default class DomActions {\n    static toggleSideNav() {\n        return{\n            type:\"TOGGLE_SIDENAV\"\n        }\n    };\n    static hideSideNav() {\n        return{\n            type:\"HIDE_SIDENAV\"\n        }\n    };\n}","import React, {Component} from 'react';\nimport {Navbar, NavbarBrand, NavbarToggler} from 'mdbreact';\nimport ActiveTask from \"./playbook/active_task\";\nimport connect from \"react-redux/es/connect/connect\";\nimport DomActions from \"../actions/dom_actions\";\n\n\nclass TopNavigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapse: false,\n        };\n    }\n\n\n\n    render() {\n        if(!((this.props.activeTask && this.props.activeTask.task)||window.innerWidth < 1200)){\n            return null\n        }\n        return (\n            <Navbar className=\"flexible-navbar\" light expand=\"md\" scrolling>\n                <NavbarBrand>\n                    <span/>\n                </NavbarBrand>\n                <NavbarToggler onClick = { this.props.toggleShowSideNav} />\n                <ActiveTask/>\n            </Navbar>\n        );\n    }\n}\n\n\nlet mapStateToProps = function (state) {\n    return {\n        activeTask: state.app.activeTask\n    }\n}\n\nlet mapDispatchToProps = function (dispatch) {\n    return {\n        toggleShowSideNav:()=>dispatch(DomActions.toggleSideNav())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopNavigation);\n","import React, {Component} from 'react';\nimport {Fa, ListGroup, ListGroupItem} from 'mdbreact';\nimport connect from \"react-redux/es/connect/connect\";\nimport DomActions from '../actions/dom_actions';\nimport {Link} from \"react-router-dom\";\n\nclass SideNavigation extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {app_version: window.APP_VERSION || null, isOpen: false}\n        this.handleToggl = this.handleToggl.bind(this)\n    }\n\n    componentDidMount() {\n        if (this.state.app_version !== \"null\") {\n            setTimeout(() => {\n                this.setState({app_version: window.APP_VERSION || \"dev\"})\n            }, 1000)\n        }\n    }\n\n    handleToggl = ()=> {\n        this.props.hideSideNav()\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    };\n\n    render() {\n        let classNames = 'hide-on-small sidebar-fixed';\n        if (this.props.showSideNavOnSmallScreens) {\n            classNames = 'sidebar-fixed';\n        }\n        return (<div className={classNames}>\n                <a href=\"#!\" className=\"logo-wrapper waves-effect\">\n                    <img alt=\"MDB React Logo\" className=\"img-fluid\"\n                         src={process.env.PUBLIC_URL + '/img/taestitrack.png' }/>\n                </a>\n                <ListGroup className=\"list-group-flush\">\n\n                    <ListGroupItem className=\"cursor-pointer\">\n                        <Link to={\"/dashboard\"} onClick={this.handleToggl}>\n                            <Fa icon=\"pie-chart\" className=\"mr-3\"/>\n                            Dashboard\n                        </Link>\n                    </ListGroupItem>\n                    <ListGroupItem className=\"cursor-pointer\">\n                        <Link to=\"/playbooks\" onClick={this.handleToggl}>\n                            <Fa icon=\"user\" className=\"mr-3\"/>\n                            <span>Show Playbooks</span>\n                        </Link>\n                    </ListGroupItem>\n                    <ListGroupItem className=\"cursor-pointer\">\n                        <Link to=\"/playbooks/new\" onClick={this.handleToggl}>\n                            <Fa icon=\"table\" className=\"mr-3\"/>\n                            <span>Create Playbook</span>\n                        </Link>\n                    </ListGroupItem>\n                    <ListGroupItem className=\"cursor-pointer\">\n                        <Link to=\"/logout\" onClick={this.handleToggl}>\n                            <Fa icon=\"sign-out\" className=\"mr-3\"/>\n                            <a>Sign Out</a>\n                        </Link>\n                    </ListGroupItem>\n                    <hr/>\n                    <p id=\"app-version\">{\"Version : \" + this.state.app_version}</p>\n                </ListGroup>\n            </div>\n        );\n    }\n}\n\n\nlet mapStateToProps = function (state) {\n    return {\n        showSideNavOnSmallScreens: state.dom.show_sidenav_onsmallscreen\n    }\n};\n\nlet mapDispatchToProps = function (dispatch) {\n    return {\n        hideSideNav: () => dispatch(DomActions.hideSideNav())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavigation);\n","import React from 'react';\nimport Base from './base_components/base_component';\nimport {MDBJumbotron, MDBCol, MDBRow, MDBContainer, MDBInput, MDBBtn} from 'mdbreact';\nimport {withRouter} from \"react-router\";\n\nexport default withRouter( class SignIn extends Base {\n    constructor(props) {\n        super(props);\n        this.state = {form: {}};\n        this._bind(['change', 'login'])\n    }\n\n    change(e) {\n        let name = e.target.name;\n        let val = e.target.value;\n        this.state.form[name] = val;\n        this.setState(this.state);\n    }\n\n    login(e) {\n        e.preventDefault();\n        window.firebase.auth().signInWithEmailAndPassword(this.state.form.email, this.state.form.password).catch(function (error) {\n            let errorCode = error.code;\n            let errorMessage = error.message;\n            alert(errorMessage)\n        }).then((user) => {\n            window.user = user.user;\n            window.FB.registerListeners();\n            this.props.history.push('/playbooks')\n            window.FB.serverTimeStamp();\n        });\n\n    }\n\n    signup = event=>{\n       this.props.history.push('/register')\n    }\n\n    resetPassword = event=>{\n        event.preventDefault();\n        this.props.history.push(\"/password/reset\");\n    }\n\n    render() {\n        return <MDBContainer className=\"mt-5 text-center\">\n            <MDBRow>\n                <MDBCol>\n                    <MDBJumbotron>\n                        <div className=\"form signin-form\">\n                            <MDBInput name=\"email\" onChange={this.change} label=\"Email\"/>\n                            <MDBInput name=\"password\"  onChange={this.change} label=\"Password\" type=\"password\"/>\n\n                            <MDBBtn color=\"dark-green\" onClick={this.login}>Sign In</MDBBtn>\n                            <MDBBtn color=\"blue\" onClick={this.signup}>Sign Up</MDBBtn>\n                            <br/>\n                            <a href=\"#\" onClick={this.resetPassword}>Forgot Password</a>\n                        </div>\n                    </MDBJumbotron>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>;\n    }\n\n})\n","import React from 'react';\nimport Base from './base_components/base_component';\nimport {MDBBtn, MDBCol, MDBContainer, MDBInput, MDBJumbotron, MDBRow} from \"mdbreact\";\n\nexport default class SignUp extends Base {\n    constructor(props) {\n        super(props);\n        this.state = {form: {}};\n        this._bind(['change', 'save'])\n        window.firebase.auth().languageCode = 'en';\n    }\n\n\n    change(e) {\n        let name = e.target.name;\n        let val = e.target.value;\n        this.state.form[name] = val;\n        this.setState(this.state);\n    }\n\n    save(e) {\n        e.preventDefault();\n         window.firebase.auth().createUserWithEmailAndPassword(this.state.form.email, this.state.form.password).catch(function (error) {\n            // Handle Errors here.\n            let errorMessage = error.message;\n            alert(errorMessage)\n            // ...\n        });\n    }\n\n    componentDidMount() {\n        this.recaptcha = new window.firebase.auth.RecaptchaVerifier(\"captcha\")\n        this.recaptcha.render()\n    }\n\n    render() {\n        return <MDBContainer className=\"mt-5 text-center\">\n            <MDBRow>\n                <MDBCol>\n                    <MDBJumbotron>\n                        <div className=\"form signin-form\">\n                            <MDBInput name=\"email\" onChange={this.change} label=\"Email\"/>\n                            <MDBInput name=\"password\" onChange={this.change} label=\"Password\" type=\"password\"/>\n                            <div id=\"captcha\"></div>\n                            <MDBBtn color=\"dark-green\" onClick={this.save}>Sign Up</MDBBtn>\n                        </div>\n                    </MDBJumbotron>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>;\n    }\n\n}\n\n\n","import React from 'react';\nimport Base from './base_components/base_component';\nimport {MDBBtn, MDBCol, MDBContainer, MDBInput, MDBJumbotron, MDBRow} from \"mdbreact\";\n\nexport default class ResetPassword extends Base {\n    constructor(props) {\n        super(props);\n        this.state = {form: {}};\n        this._bind(['change', 'reset'])\n        window.firebase.auth().languageCode = 'en';\n    }\n\n\n    change(e) {\n        let name = e.target.name;\n        let val = e.target.value;\n        this.state.form[name] = val;\n        this.setState(this.state);\n    }\n\n    reset(e) {\n        e.preventDefault();\n        let promise = window.firebase.auth().sendPasswordResetEmail(this.state.form.email);\n            promise.then(()=>{\n                alert(\"password reset Mail sent\")\n            })\n            promise.catch(function (error) {\n            // Handle Errors here.\n            let errorCode = error.code;\n            let errorMessage = error.message;\n            alert(errorMessage)\n            // ...\n        });\n    }\n\n    componentDidMount() {\n        this.recaptcha = new window.firebase.auth.RecaptchaVerifier(\"captcha\")\n        this.recaptcha.render()\n    }\n\n    render() {\n        return <MDBContainer className=\"mt-5 text-center\">\n            <MDBRow>\n                <MDBCol>\n                    <MDBJumbotron>\n                        <div className=\"form signin-form\">\n                            <MDBInput name=\"email\" onChange={this.change} label=\"Email\"/>\n                            <div id=\"captcha\"></div>\n                            <MDBBtn color=\"dark-green\" onClick={this.reset}>Reset</MDBBtn>\n                        </div>\n                    </MDBJumbotron>\n                </MDBCol>\n            </MDBRow>\n        </MDBContainer>;\n    }\n\n}\n\n\n","import React from 'react';\nimport Base from '../base_components/base_component';\nimport {\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    CardText,\n    CardTitle,\n    Col,\n    MDBBadge,\n    MDBBtn,\n    MDBIcon,\n    MDBInput,\n    Row\n} from 'mdbreact';\n\nexport default class NewTaskForm extends Base {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showFormFlag: false,\n        };\n        this._bind([\"onAddClick\", \"onDiscardClick\", \"onClickCreateNew\", \"handleUpdateCard\", \"handleUpdateCardTime\"]);\n    }\n\n    onDiscardClick(event) {\n        this.setState({showFormFlag: false, newCard: null})\n    }\n\n    onAddClick() {\n        this.setState({showFormFlag: false})\n        let task = this.state.newCard\n        let estimate = task.estimate.hrs ? task.estimate.hrs * 3600 : 0;\n        estimate += task.estimate.min ? task.estimate.min * 60 : 0;\n        estimate += task.estimate.sec ? task.estimate.sec * 1 : 0;\n        task.estimate = estimate;\n        task.created_at = window.firebase.database.ServerValue.TIMESTAMP;\n        task.progress = {}\n        window.FB.addNewTask(this.props.playbook, task);\n    }\n\n    onClickCreateNew() {\n        this.setState({\n            showFormFlag: true,\n            newCard: {status: \"new\", estimate: {}}\n        });\n    }\n\n    handleUpdateCard(event) {\n        let newCard = this.state.newCard;\n        newCard[event.target.dataset.key] = event.target.value;\n        this.setState({newCard: newCard});\n    }\n\n    handleUpdateCardTime(event) {\n        let card = this.state.newCard;\n        card.estimate[event.target.dataset.key] = event.target.value;\n        this.setState({newCard: card});\n    }\n\n    renderCreateNewButton() {\n        return <Row style={{margin: \"5px 0px 5px 0px\"}} end>\n            <Col md=\"5\">\n                <MDBBtn color=\"green\" size=\"sm\" onClick={this.onClickCreateNew}><MDBIcon icon=\"plus\"/>\n                    Create New\n                </MDBBtn>\n            </Col>\n        </Row>;\n    }\n\n    renderCreateNewForm() {\n        return <Row style={{margin: \"5px 0px 5px 0px\"}}>\n            <Col>\n                <Card>\n                    <CardHeader className=\"img-fluid\">\n                        <MDBBadge color=\"blue\">New</MDBBadge>\n                    </CardHeader>\n                    <CardBody>\n                        <CardTitle className=\"task-title\">\n                            <MDBInput label=\"Task description\" type=\"textarea\" data-key=\"title\" name=\"title\"\n                                      onChange={this.handleUpdateCard}/>\n                        </CardTitle>\n                        <CardText>\n                            Estimate : <span className=\"task task-estimate\">\n                            <Row>\n                                <Col size={4}>\n                                    <MDBInput className=\"new-task-time-input\" label=\"hh\" data-key=\"hrs\" type=\"number\"\n                                              size=\"2\" min=\"0\" max=\"23\" onChange={this.handleUpdateCardTime}/>\n                                </Col>\n                                <Col size={4} >\n                            <MDBInput className=\"new-task-time-input\" label=\"mm\" data-key=\"min\" type=\"number\" size=\"2\"\n                                      min=\"0\" max=\"59\" onChange={this.handleUpdateCardTime}/>\n                                </Col>\n                                <Col size={4}>\n                                    <MDBInput className=\"new-task-time-input\" label=\"ss\" data-key=\"sec\" type=\"number\"\n                                              size=\"2\" min=\"0\" max=\"59\" onChange={this.handleUpdateCardTime}/>\n                                </Col>\n                            </Row>\n                        </span>\n\n                        </CardText>\n                    </CardBody>\n                    <CardFooter>\n                        <MDBBtn color=\"red\" onClick={this.onDiscardClick}>Discard</MDBBtn>\n                        <MDBBtn color=\"green\" onClick={this.onAddClick}>Add</MDBBtn>\n                    </CardFooter>\n                </Card>\n            </Col>\n        </Row>\n    }\n\n    render() {\n        return this.state.showFormFlag ? this.renderCreateNewForm() : this.renderCreateNewButton();\n    }\n\n\n}\n","export default class TaskActions {\n\n    add(description, estimate,playbookId) {\n        return {\n            type: \"TASK_ADD\",\n            description,\n            estimate,\n            playbookId\n        }\n    }\n\n    static start(task,playbook){\n        return dispatch=>{\n            window.FB.startTask(playbook,task,()=>{dispatch({type: \"TASK_START\", task:task});});\n        };\n    }\n\n    pause(id) {\n        return {\n            type: \"TASK_PAUSE\",\n            id\n        }\n    }\n\n    static done(task,playbook){\n        return dispatch=>{\n            window.FB.markTaskDone(playbook,task);\n      };\n    }\n\n    static delete(task, playbook){\n        return dispatch=>{\n            window.FB.deleteTask(playbook,task)\n        }\n    }\n\n    static update(task, playbook, callback){\n        return dispatch=>{\n            window.FB.updateTask(playbook,task).then(callback)\n        }\n    }\n\n}\n","export default class LapActions {\n    static edit(playbook,task,lap, callback){\n        return dispatch=>{\n            window.FB.editLap(playbook,task,lap,(arg)=>{callback()});\n        };\n    }\n}","import {MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader} from \"mdbreact\";\nimport React, {Component, Fragment} from \"react\";\nimport DateFormatter from \"./date_formatter\";\nimport DatePicker from \"react-datepicker\";\nimport {connect} from \"react-redux\";\nimport LapActions from \"../../actions/laps_actions\";\n\nclass LapModel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editing: false,\n            ...this.props.lap\n        }\n    }\n\n    componentDidMount() {\n        this.setState({editing:false})\n    }\n\n    static getDerivedStateFromProps(props,state){\n        return {\n            start : state.start || (props.lap && props.lap.start) || null,\n            end : state.end || (props.lap && props.lap.end) || null,\n            note : state.note || (props.lap && props.lap.note) || null\n        }\n    }\n\n    renderDetails() {\n        let state = this.state\n        return (<Fragment>\n            <div>Start : <DateFormatter milliseconds={this.state.start}/></div>\n            <div>End : <DateFormatter milliseconds={this.state.end}/></div>\n            <div>Note : {this.state.note}</div>\n        </Fragment>)\n    }\n\n    handleChange = name => value => {\n        let state = {};\n        state[name] = value;\n        this.setState(state);\n    }\n\n    handleEdit = e => this.setState({editing: true});\n    handleSave = e => {\n        let lap = {};\n        lap.key = this.props.lap.key;\n        lap.start = this.state.start;\n        lap.end = this.state.end;\n        lap.note = this.state.note;\n        this.props.editLap(this.props.playbook, this.props.task, lap,()=>{\n            this.setState({editing:false})\n        })\n    };\n\n    renderToolBar(props) {\n        return <Fragment>\n            <MDBBtn color=\"secondary\" onClick={()=>this.setState({editing:false},props.toggle)}>Close</MDBBtn>\n            {this.props.task.status !== 'done' ? !this.state.editing ? <MDBBtn onClick={this.handleEdit} color=\"primary\">Edit</MDBBtn> :\n                <MDBBtn color=\"primary\" onClick={this.handleSave}>Save</MDBBtn> : null}\n        </Fragment>\n\n    }\n\n    renderForm() {\n        let state = this.state;\n        return (<Fragment>\n            <div>Start : <DatePicker\n                selected={this.state.start && new Date(this.state.start)}\n                showTimeSelect\n                onChange={val=>(this.handleChange('start')(val.getTime()))}\n                dateFormat=\"dd/MM/yyyy hh:mm aa\"\n            />\n            </div>\n            <div>End : <DatePicker\n                selected={this.state.end && new Date(this.state.end)}\n                showTimeSelect\n                onChange={val=>(this.handleChange('end')(val.getTime()))}\n                dateFormat=\"dd/MM/yyyy hh:mm aa\"\n            />\n            </div>\n            <MDBInput valueDefault={this.state.note} onChange={e =>(this.handleChange('note')(e.target.value))} type=\"textarea\" label=\"Note\" rows=\"3\"/>\n        </Fragment>)\n    }\n\n    render() {\n        let props = this.props;\n        return props.lap !== null && (<MDBModal centered isOpen={true} size={'md'} toggle={()=>this.setState({editing:false},props.toggle)}>\n            <MDBModalHeader toggle={()=>this.setState({editing:false},props.toggle)}>Lap Details</MDBModalHeader>\n            <MDBModalBody>\n                <div>Playbook : {props.playbook.title}</div>\n                <div>Task : {props.task.title}</div>\n                {this.state.editing?this.renderForm(props):this.renderDetails(props)}\n            </MDBModalBody>\n            <MDBModalFooter>\n                {this.renderToolBar(props)}\n            </MDBModalFooter>\n        </MDBModal>);\n    }\n}\n\nexport default connect (null, {editLap:LapActions.edit})(LapModel);\n","import React, {Fragment} from 'react';\nimport {connect} from \"react-redux\";\nimport {\n    Card,\n    CardBody,\n    CardFooter,\n    CardHeader,\n    CardText,\n    CardTitle,\n    Col,\n    MDBBadge,\n    MDBBtn,\n    MDBIcon,\n    MDBInput,\n    MDBTable,\n    Row,\n} from 'mdbreact';\n\nimport TimeFormatter from './time_formatter';\nimport DateFormatter from './date_formatter';\nimport Base from '../base_components/base_component';\nimport TaskActions from '../../actions/task_actions';\nimport LapModal from './lap_modal'\n\nclass Task extends Base {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lapsToggle: false,\n            editLap: null,\n            editTask: false,\n            taskTitle: props.task.title\n        };\n\n    }\n\n    onDelete = event => {\n        event.preventDefault();\n        const task = this.props.task\n        this.props.delete(task, this.props.playbook);\n    }\n\n    onStartProvider() {\n        return () => {\n            this.props.start(this.props.task, this.props.playbook);\n        }\n    }\n\n    onDoneProvider() {\n        return () => {\n            this.props.done(this.props.task, this.props.playbook);\n        }\n    }\n\n    toggleLaps = () => {\n        this.setState({lapsToggle: !this.state.lapsToggle})\n    }\n\n    onUpdate = () => {\n        let task = {...this.props.task}\n        task.title = this.state.taskTitle;\n        this.props.update(task, this.props.playbook, () => {\n            this.setState({editTask: false})\n        });\n    }\n\n    renderControlPanel() {\n        let startBtn = <MDBBtn color=\"cyan\" size=\"sm\" onClick={this.onStartProvider()}><MDBIcon icon=\"play\"/></MDBBtn>;\n        let endBtn = <MDBBtn color=\"green\" size=\"sm\" onClick={this.onDoneProvider()}><MDBIcon icon=\"stop\"/></MDBBtn>;\n        let lapsBtn = <MDBBtn color=\"yellow\" size=\"sm\" onClick={this.toggleLaps}><MDBIcon icon=\"list-alt\"/></MDBBtn>;\n        if (this.props.task.status === 'new') {\n            lapsBtn = null;\n        }\n        if (this.props.task.status === 'done') {\n            startBtn = null;\n            endBtn = null;\n        }\n        return <CardFooter>\n            {startBtn}\n            {endBtn}\n            {lapsBtn}\n        </CardFooter>\n    }\n\n    getTimeTaken() {\n        let task = this.props.task;\n        let timeTaken = 0;\n        if (task.laps) {\n            for (let lapKey in task.laps) {\n                let lap = task.laps[lapKey];\n                if (lap.end && lap.start) {\n                    timeTaken += lap.end - lap.start;\n                }\n            }\n        }\n        return timeTaken / 1000;\n    }\n\n    renderStatus(status) {\n        switch (status) {\n            case \"new\":\n                return <MDBBadge color=\"blue\">New</MDBBadge>;\n            case \"paused\":\n                return <MDBBadge color=\"yellow\">Paused</MDBBadge>;\n            case \"done\":\n                return <MDBBadge color=\"green\">Done</MDBBadge>;\n            default:\n                return <MDBBadge color=\"primary\">{status}</MDBBadge>\n        }\n    }\n\n    renderLaps() {\n        if (!this.state.lapsToggle) {\n            return;\n        }\n        let rows = [];\n        let index = 1;\n        for (let lapKey in this.props.task.laps) {\n            let lap = {...this.props.task.laps[lapKey]};\n            lap.key = lapKey;\n            lap.title = <div>\n                Worked for <TimeFormatter humanize\n                                          timeInSeconds={parseInt((parseInt(lap.end) - parseInt(lap.start)) / 1000)}/> from <DateFormatter\n                milliseconds={lap.start}/> {lap.note && ` on ${lap.note}`}.\n            </div>\n\n\n            rows.push(<tr key={lapKey}>\n                <td><small>\n                    <a onClick={this.showLapsModel(lap)}>\n                        <MDBIcon icon=\"ellipsis-v\"/>\n                    </a>\n                </small></td>\n                <td>\n                    <small>{index++}</small></td>\n                <td>\n                    <small>\n                        <a onClick={this.showLapsModel(lap)}>\n                            <em>{lap.title}</em>\n                        </a>\n                    </small>\n                </td>\n            </tr>)\n        }\n        return <div>\n            <h4>Laps ({Object.keys(this.props.task.laps).length})</h4>\n            <MDBTable responsive>\n                {rows}\n            </MDBTable>\n        </div>\n\n    }\n\n    showLapsModel = lap => event => {\n        event.preventDefault();\n        this.setState({editLap: lap})\n    }\n\n    renderTitle() {\n        if (this.state.editTask) {\n            return <MDBInput label=\"Task description\" type=\"textarea\" value={this.state.taskTitle}\n                             onChange={e => this.setState({taskTitle: e.target.value})}/>\n        }\n        return <Fragment>\n            {this.props.task.title}\n        </Fragment>\n    }\n\n    renderEditButton() {\n        if(this.props.task.status === 'done'){\n            return null;\n        }\n\n        if (this.state.editTask) {\n            return (<Fragment>\n                <a onClick={e => {\n                    e.preventDefault();\n                    this.onUpdate()\n                }}\n                ><MDBIcon className={'save link-icon'} icon={'save'}/></a>\n                <a onClick={e => {\n                    e.preventDefault();\n                    this.setState({editTask: false})\n                }}><MDBIcon className={'dismiss link-icon'} icon={'times'}/></a>\n            </Fragment>)\n        }\n\n        return (<a onClick={e => {\n            e.preventDefault();\n            this.setState({editTask: true})\n        }}><MDBIcon className={'edit link-icon'} icon={'edit'}/></a>)\n    }\n\n    render() {\n        let task = this.props.task;\n        let playbook = this.props.playbook;\n        return (\n            <Row style={{margin: \"5px 0px 5px 0px\"}} className={'task'}>\n                <Col>\n                    <Card>\n                        <div className=\"face front\">\n                            <CardHeader className=\"img-fluid\">\n                                {this.renderStatus(task.status)}\n                                <span className={'right top-right-controls'}>\n                                {this.renderEditButton()}\n                                    <a onClick={this.onDelete}><MDBIcon className={'delete link-icon'} icon={'trash'}/></a>\n                            </span>\n                            </CardHeader>\n                            <CardBody>\n                                <CardTitle className=\"task-title\">{this.renderTitle()}</CardTitle>\n                                <CardText>\n                                    Estimate : <span className=\"task task-estimate\"><TimeFormatter humanize\n                                                                                                   timeInSeconds={task.estimate}/></span>\n                                    Time Taken : <span className=\"task task-estimate\"><TimeFormatter humanize\n                                                                                                     timeInSeconds={this.getTimeTaken()}/></span>\n                                    {this.renderLaps()}\n                                </CardText>\n                            </CardBody>\n                            {this.renderControlPanel()}\n                        </div>\n                    </Card>\n                </Col>\n                {this.state.editLap !== null && <LapModal {...{task, playbook}} lap={this.state.editLap}\n                                                          toggle={() => this.setState({editLap: null})}/>}\n            </Row>)\n    }\n\n\n}\n\nlet mapStateToProps = function (state) {\n    return {\n        playbook: state.playbooks[state.app.currentPlaybook]\n    }\n};\n\nlet mapDispatchToProps = function (dispatch) {\n    return {\n        done: (task, playbook) => {\n            dispatch(TaskActions.done(task, playbook));\n        },\n        start: (task, playbook) => {\n            dispatch(TaskActions.start(task, playbook))\n        },\n        delete: (task, playbook) => {\n            dispatch(TaskActions.delete(task, playbook))\n        },\n        update: (task, playbook, callback) => {\n            dispatch(TaskActions.update(task, playbook, callback))\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);\n","import React, {Fragment} from \"react\";\nimport {connect} from \"react-redux\";\n\nimport Base from \"../base_components/base_component\";\nimport NewTaskForm from './new_task_form';\nimport Task from './task';\nimport {MDBCol, MDBContainer, MDBRow} from \"mdbreact\";\nimport {withRouter} from \"react-router\";\n\nconst counter = {val:0, playListLoaded:false}\nclass Playbook extends Base {\n\n    constructor(props) {\n        super(props);\n        this.state = {isTodoSelected: true,playbook:null};\n        this.mobileTabToggle = this.mobileTabToggle.bind(this);\n        counter.val = 0\n        counter.playListLoaded = false;\n    }\n\n    static getDerivedStateFromProps(props) {\n        let playbooks = props.playbooks;\n        let playbook = playbooks[props.match.params.id] || null\n        if(playbook){\n            counter.playListLoaded = true;\n        }\n        return {\n            playbook: playbook\n        }\n    }\n\n    componentDidMount() {\n        this.setState({listener: window.FB.registerPlaybookListener(this.props.match.params.id)});\n    }\n\n    componentWillUnmount() {\n        window.FB.deRegisterPlaybookListener(this.state.playbook.key, this.state.listener);\n    }\n\n    renderTodo() {\n        if (!this.state.playbook.tasks) {\n            return null\n        }\n        let tasks = this.state.playbook.tasks;\n        let taskKeys = Object.keys(tasks).filter(key => (tasks[key].status === 'new' || tasks[key].status === 'paused'));\n        return taskKeys.map(key => {\n            let task = tasks[key];\n            task.key = key;\n            return <Task key={key} task={task}/>\n\n        });\n    }\n\n    renderDone() {\n        if (!this.state.playbook.tasks) {\n            return null\n        }\n        let tasks = this.state.playbook.tasks;\n        let taskKeys = Object.keys(tasks).filter(key => tasks[key].status === 'done');\n        return taskKeys.map(key => {\n            let task = tasks[key];\n            task.key = key;\n            return <Task key={key} task={task}/>\n        });\n    }\n\n    mobileTabToggle() {\n        this.setState({isTodoSelected: !this.state.isTodoSelected});\n    }\n\n    render() {\n        if(this.state.playbook === null){\n            return \"Loading playbook ...\"\n        }\n        return <Fragment>\n            <MDBContainer fluid className=\"d-none d-md-block\">\n                <MDBRow>\n                    <MDBCol>\n                        <h4>{this.state.playbook.title}</h4>\n                    </MDBCol>\n                </MDBRow>\n                <MDBRow>\n                    <MDBCol>\n                        {this.state.playbook.description}\n                    </MDBCol>\n                </MDBRow>\n                <MDBRow>\n                    <MDBCol size=\"12\" md=\"6\" className=\"todo\">\n                        <h4>To-Do</h4>\n                        <div className=\"spacer-40px\"></div>\n                        <MDBContainer fluid className=\"playbook-col todo\">\n                            <NewTaskForm playbook={this.state.playbook}/>\n                            {this.renderTodo()}\n                        </MDBContainer>\n                    </MDBCol>\n                    <MDBCol size=\"12\" md=\"6\">\n                        <h4>Done</h4>\n                        <div className=\"spacer-60px\"></div>\n                        <MDBContainer fluid className=\"playbook-col done\">\n                            {this.renderDone()}\n                        </MDBContainer>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n\n            <MDBContainer className=\"d-block d-md-none\">\n                <MDBRow size=\"12\">\n                    <MDBCol>\n                        <h4>{this.state.playbook.title}</h4>\n                        {this.state.playbook.description}\n                    </MDBCol>\n                </MDBRow>\n                <MDBRow>\n                    <ul className=\"nav nav-tabs col-12\" id=\"myTab\" role=\"tablist\">\n                        <li className=\"nav-item col-6\">\n                            <span onClick={this.mobileTabToggle}\n                                  className={this.state.isTodoSelected ? \"nav-link active\" : \"nav-link\"}><h4>To-Do</h4></span>\n                        </li>\n                        <li className=\"nav-item col-6\">\n                            <span onClick={this.mobileTabToggle}\n                                  className={this.state.isTodoSelected ? \"nav-link\" : \"nav-link active\"}><h4>Done</h4></span>\n                        </li>\n                    </ul>\n                </MDBRow>\n                <MDBRow>\n                    <MDBCol size=\"12\">\n                        <div className=\"playbook-col\">\n                            {(() => {\n                                let todo = <Fragment>\n                                    <NewTaskForm playbook={this.state.playbook}/>\n                                    {this.renderTodo()}\n                                </Fragment>;\n\n                                let done = <Fragment>\n                                    {this.renderDone()}\n                                </Fragment>;\n                                return this.state.isTodoSelected ? todo : done;\n                            })()}\n                        </div>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        </Fragment>\n    }\n}\n\nlet mapStateToProps = function (state) {\n    return {\n        playbooks: state.playbooks,\n    }\n};\n\nlet mapDispatchToProps = function () {\n    return {}\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Playbook));\n","import {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport Dashboard from './components/dashboard/dashboard_component';\nimport NewPlaybook from './components/playbook/new_playbook_form';\nimport ListPlaybook from './components/playbook/playbook_list';\nimport {Provider} from \"react-redux\";\nimport TopNavigation from \"./components/topNavigation\";\nimport SideNavigation from \"./components/sideNavigation\";\nimport React, {Fragment} from \"react\";\nimport SignIn from \"./components/sign_in\";\nimport SignUp from \"./components/sign_up\";\nimport ResetPassword from \"./components/reset_password\";\nimport Playbook from \"./components/playbook/playbook\";\nimport {Redirect, withRouter} from \"react-router\";\n\nconst getPage = function (Top, Side, Main) {\n    return props => (<div className=\"flexible-content page-wrapper\">\n        <div className=\"left-panel\">\n            {Side}\n        </div>\n        <div className=\"right-panel\">\n            <div className=\"top-nav\">\n                {Top}</div>\n            <div className=\"main-block\">\n                {Main}\n            </div>\n        </div>\n    </div>);\n}\n\nconst getPageWithNavigation = function (component) {\n    return getPage(<TopNavigation/>, <SideNavigation/>, component);\n}\n\nconst getProviderWrapped = function (component) {\n    return props => <Provider store={window.APP_GLOBALS.store}>\n        {component}\n    </Provider>\n}\n\nexport function MakePrivateRoute(Component){\n    return props=>{\n        if(window.user){\n            return <Component/>\n        }\n        return <Redirect to={'/login'}/>\n    }\n}\n\nconst SignInPage = getPage(null, null, <SignIn/>)\nconst SignUpPage = getPage(null, null, <SignUp/>);\nconst ResetPasswordPage = getPage(null, null, <ResetPassword/>);\nconst DashboardPage = MakePrivateRoute(getPageWithNavigation(<Dashboard/>));\nconst NewPlaybookPage = MakePrivateRoute(getPageWithNavigation(<NewPlaybook/>));\nconst ListPlaybookPage = MakePrivateRoute(getPageWithNavigation(<ListPlaybook/>));\nconst PlaybookPage = MakePrivateRoute(getPageWithNavigation(<Playbook/>));\n\nconst Logout = withRouter(props => {\n    window.firebase.auth().signOut().then(() => {\n        return props.history.push('/login')\n    })\n    return \"Logging out...\";\n})\n\nexport default getProviderWrapped(<BrowserRouter>\n    <Switch>\n        <Route path=\"/login\"><SignInPage/></Route>\n        <Route path=\"/logout\"><Logout/></Route>\n        <Route path=\"/register\"><SignUpPage/></Route>\n        <Route path=\"/password/reset\"><ResetPasswordPage/></Route>\n        <Route path=\"/dashboard\"><DashboardPage/></Route>\n        <Route path=\"/playbook/:id\"><PlaybookPage/></Route>\n        <Route path=\"/playbooks/new\"><NewPlaybookPage/></Route>\n        <Route path=\"/playbooks\"><ListPlaybookPage/></Route>\n        <Route path=\"/\"><DashboardPage/></Route>\n    </Switch>\n</BrowserRouter>)\n","import {applyMiddleware, createStore} from 'redux'\nimport combined from './reducers/combined'\nimport thunk from 'redux-thunk'\n\nexport default (state)=> createStore(combined, state, applyMiddleware(thunk));\n\n\n\n","export default class LogsActions {\n    static refresh(logs) {\n        return {\n            type: \"REFRESH_LOGS\",\n            logs\n        }\n    }\n}","import PlaybookActions from './actions/playbooks_actions';\nimport LogsActions from \"./actions/logs_actions\";\n\nexport default class FirebaseHelper {\n\n    constructor() {\n        this.db = window.firebase.database()\n    }\n\n    addNewPlayBook(title, description, next) {\n        let refs = {};\n\n        let newPlaybookForUser = cb => {\n            let ref = null;\n            if (window.user && window.user.uid) {\n                ref = this.db.ref('users/' + window.user.uid + '/playbooks');\n                let playbook = ref.push();\n                refs.userPlabooksEntry = playbook;\n                cb(playbook)\n            }\n        };\n\n\n        let addToPlaybookRef = playbookUserRef => {\n            let users = {};\n            users[window.user.uid] = \"owner\";\n            let status = \"active\";\n            let data = {\n                title,\n                description,\n                users,\n                status\n            }\n            let ref = this.db.ref('/playbooks/' + playbookUserRef.key);\n            refs.playbooksEntry = ref;\n            ref.set(data).then(() => {\n                playbookUserRef.set(true);\n                refs.playbooksEntry.once('value').then((snap) => {\n                    next(snap)\n                }).catch(() => console.log(\"there is an error\"));\n            });\n        }\n\n        newPlaybookForUser(addToPlaybookRef.bind(this));\n    }\n\n    getPlaybooks() {\n        let ref = this.db.ref('users/' + window.user.uid + '/playbooks');\n        ref.once('value').then(snap => {\n        }).catch(err => alert(err.message))\n    }\n\n\n    registerListeners() {\n        window.FB_Listenters = []\n        window.FB_Listenters[0] = this.db.ref('users/' + window.user.uid + '/playbooks').on('value', this.listenForUserPlaybooks.bind(this));\n        window.FB_Listenters[1] = this.db.ref('users/' + window.user.uid + '/active-task').on('value', this.listenForActiveTask);\n        window.FB_Listenters[1] = this.db.ref('users/' + window.user.uid + '/logs').on('value', this.listenForLogs);\n    }\n\n    listenForLogs(snapshot){\n        let logs = snapshot.toJSON();\n        window.APP_GLOBALS.store.dispatch(LogsActions.refresh(logs));\n    }\n\n    listenForUserPlaybooks(snapshot) {\n        let playbooks = snapshot.toJSON();\n        let books = {};\n        if (playbooks == null) {\n            return window.APP_GLOBALS.store.dispatch(PlaybookActions.hydrate(books));\n        }\n        let bookKeys = Object.keys(playbooks);\n\n        let index = 0;\n        let db = this.db;\n\n        let processKey = () => {\n            if (index <= (bookKeys.length - 1)) {\n                db.ref('playbooks/' + bookKeys[index]).once('value').then((snap) => {\n                    let key = snap.key\n                    if (playbooks[key]) {\n                        snap = snap.toJSON();\n                        snap.key = key;\n                        books[key] = snap;\n                    }\n                    processKey();\n                }).catch((err) => {\n                    console.log(err.message);\n                    processKey();\n                });\n            } else {\n                window.APP_GLOBALS.store.dispatch(PlaybookActions.hydrate(books));\n            }\n            index++;\n        }\n        processKey();\n    }\n\n    listenForActiveTask(snapshot) {\n        let activeTask = snapshot.toJSON();\n        window.APP_GLOBALS.store.dispatch({\n            type: \"SET_ACTIVE_TASK\",\n            activeTask\n        });\n    }\n\n    listenForPlaybook(snapshot) {\n        let playbook = snapshot.toJSON()\n        if (playbook == null) {\n            return\n        }\n        playbook.key = snapshot.key;\n        playbook.ref = snapshot.ref;\n        window.APP_GLOBALS.store.dispatch(PlaybookActions.update(playbook));\n        window.APP_GLOBALS.store.dispatch({type:\"CURRENT_PLAYBOOK\",playbook});\n    }\n\n    registerPlaybookListener(key) {\n        return this.db.ref(\"playbooks/\" + key).on(\"value\", this.listenForPlaybook);\n    }\n\n    deRegisterPlaybookListener(key, listener) {\n        return this.db.ref(\"playbooks/\" + key).off(\"value\", listener)\n    }\n\n    addNewTask(playbook, task) {\n        let ref = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks\");\n        ref.push(task)\n    }\n\n    deleteTask(playbook, task){\n        let taskRef = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key)\n        return taskRef.remove();\n    }\n\n    markTaskDone(playbook, task, callback) {\n        let taskStatusRef = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key + \"/status\");\n        return taskStatusRef.set(\"done\").then(() => {\n            this.endLap(playbook, task, (playbook,task)=>this.updateDoneLog(playbook,task,callback));\n        });\n    }\n\n    updateTask(playbook, task){\n        let taskRef = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key);\n        delete task.key\n        return taskRef.set(task);\n    }\n\n    updateDoneLog(playbook, task, callback) {\n        let doneLogsRef = this.db.ref('users/' + window.user.uid + '/logs/completedTasks');\n        let taskRef = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key);\n        let data = {\n            playbook: playbook.title,\n            task: task.title,\n        }\n        taskRef.once('value').then(snap => {\n            if(snap.child('status').val() === 'done'){\n                let laps = snap.child('laps').val();\n                let taskEndTime = 0;\n                let taskStartTime = Number.MAX_SAFE_INTEGER;\n                let taskDuration = 0;\n                for(let lapKey in laps){\n                    if(taskEndTime < laps[lapKey].end){\n                        taskEndTime = laps[lapKey].end;\n                    }\n                    if(taskStartTime > laps[lapKey].start){\n                        taskStartTime = laps[lapKey].start;\n                    }\n                    taskDuration += laps[lapKey].end - laps[lapKey].start;\n                }\n                data.started_at = taskStartTime;\n                data.completed_at = taskEndTime;\n                data.duration = parseInt(taskDuration/1000);\n                data.estimate = snap.child('estimate').val();\n                data.created_at = snap.child('created_at').val();\n            }\n            doneLogsRef.push(data).then(()=>{callback && callback();})\n        })\n    }\n\n    editLap(playbook, task, lap, callback) {\n        let ref = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key + \"/laps/\"+lap.key);\n        let newLap = {};\n        newLap.start = lap.start;\n        newLap.end = lap.end;\n        if(lap.note){\n            newLap.note = lap.note;\n        }\n        ref.set(newLap).then(callback);\n    }\n\n    startLap(playbook, task, callback) {\n        let ref = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key + \"/laps\");\n        ref.once('value').then((snap) => {\n            let laps = snap.toJSON();\n            let ongoingLap = null;\n\n            if (laps === null) {\n                ref.push({\n                    start: window.firebase.database.ServerValue.TIMESTAMP,\n                    end: false\n                });\n                return callback();\n            }\n            //find any ongoing lap in lap list\n            for (let lapKey in laps) {\n                let lap = laps[lapKey];\n                lap.key = lapKey;\n                if (lap.end === false) {\n                    ongoingLap = lap;\n                }\n            }\n\n            if (ongoingLap === null) {\n                ref.push({\n                    start: window.firebase.database.ServerValue.TIMESTAMP,\n                    end: false\n                });\n                return callback();\n            }\n\n            return callback();\n        }).catch(() => console.log(\"there is error in starting lap\"));\n    }\n\n    endLap(playbook, task, callback) {\n        let ref = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key + \"/laps\");\n        ref.once('value').then((snap) => {\n            let laps = snap.toJSON();\n            let ongoingLap = null;\n            //task is marked done with no ongoing laps\n            if (laps === null) {\n                ref.push({\n                    start: window.firebase.database.ServerValue.TIMESTAMP,\n                    end: window.firebase.database.ServerValue.TIMESTAMP\n                });\n                return callback(playbook, task);\n            }\n\n            for (let lapKey in laps) {\n                let lap = laps[lapKey];\n                lap.key = lapKey;\n                if (lap.end === false) {\n                    ongoingLap = lap;\n                }\n            }\n\n            if (ongoingLap === null) {\n                return ref.push({\n                    start: window.firebase.database.ServerValue.TIMESTAMP,\n                    end: window.firebase.database.ServerValue.TIMESTAMP\n                }).then(() => (callback(playbook, task)));\n            }\n\n            let ongoingRef = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key + \"/laps/\" + ongoingLap.key + \"/end\");\n            return ongoingRef.set(window.firebase.database.ServerValue.TIMESTAMP).then(() => callback(playbook, task));\n\n        }).catch((err) => console.log(\"there is error in starting lap\" + err));\n    }\n\n    markTaskOngoing(playbook, task) {\n        let ref = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key + \"/status\");\n        return ref.once('value').then(snap => {\n            if (snap.val() === \"new\" || snap.val() === 'paused') {\n                return ref.set(\"ongoing\").then(() => {\n                    this.startLap(playbook, task)\n                });\n            }\n            return;\n        })\n    }\n\n    markTaskPaused(playbook, task, callback) {\n        let ref = this.db.ref(\"/playbooks/\" + playbook.key + \"/tasks/\" + task.key + \"/status\");\n        return ref.once('value').then(snap => {\n            if (snap.val() === \"ongoing\") {\n                return ref.set(\"paused\").then(() => {\n                    this.endLap(playbook, task, callback)\n                });\n            }\n            return;\n        })\n    }\n\n    startTask(playbook, task) {\n        const refStr = 'users/' + window.user.uid + '/active-task';\n        this.db.ref(refStr).once('value').then(snap => {\n            let activeTask = snap.toJSON();\n            if (activeTask === null) {\n                this.db.ref(refStr).set({task: task.key, playbook: playbook.key}).then(() => {\n                    return this.markTaskOngoing(playbook, task);\n                });\n            }\n            return;\n        });\n    }\n\n    pauseTask(playbook, task, callback) {\n        const refStr = 'users/' + window.user.uid + '/active-task';\n        this.db.ref(refStr).once('value').then(snap => {\n            let activeTask = snap.toJSON();\n            if (activeTask !== null) {\n                this.db.ref(refStr).set(null).then(() => {\n                    return this.markTaskPaused(playbook, task, callback);\n                });\n            }\n            return;\n        });\n    }\n\n    doneWithTask(playbook, task, callback) {\n        const refStr = 'users/' + window.user.uid + '/active-task';\n        this.db.ref(refStr).once('value').then(snap => {\n            let activeTask = snap.toJSON();\n            if (activeTask !== null) {\n                this.db.ref(refStr).set(null).then(() => {\n                    return this.markTaskDone(playbook, task, callback);\n                });\n            }\n            return;\n        });\n    }\n\n    removePlaybook(playbookId) {\n        const refStr = 'users/' + window.user.uid + '/playbooks/' + playbookId\n        this.db.ref(refStr).remove()\n            .then(() => {\n                let playbookRef = 'playbooks/' + playbookId;\n                this.db.ref(playbookRef).remove()\n                    .then(() => {\n                        const refStr = 'users/' + window.user.uid + '/active-task';\n                        this.db.ref(refStr).once('value').then(snap => {\n                            let activeTask = snap.toJSON();\n                            if (activeTask !== null && activeTask.playbook === playbookId) {\n                                this.db.ref('users/' + window.user.uid + '/active-task').set(null);\n                            }\n                        })\n                    })\n                    .catch(() => console.error(\"delete failed\"))\n            })\n            .catch(function (error) {\n                console.log(\"Remove failed: \" + error.message)\n            });\n    }\n\n    serverTimeStamp() {\n        const refStr = 'users/' + window.user.uid + '/current-time';\n        this.db.ref(refStr).set(window.firebase.database.ServerValue.TIMESTAMP).then(() => {\n            this.db.ref(refStr).once('value').then(snap => {\n                window.APP_GLOBALS.TIMESTAMP = parseInt(snap.val() / 1000) + 2;\n                setInterval(() => {\n                    ++window.APP_GLOBALS.TIMESTAMP\n                }, 1000);\n            });\n        })\n    }\n\n\n}\n","import \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport 'mdbreact/dist/mdbreact';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport '@fortawesome/fontawesome-free/webfonts/fa-solid-900.woff';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from \"./store\";\nimport AppRouter from './routes';\nimport FirebaseHlpr from './firebase_helper';\nwindow.APP_GLOBALS = {store: store({})};\nwindow.FB = new FirebaseHlpr();\nwindow.firebase.auth().onAuthStateChanged(user => {\n    if (user) {\n        window.user = user;\n        window.FB.registerListeners();\n        window.FB.serverTimeStamp();\n    }\n    ReactDOM.render(<AppRouter/>, document.getElementById('root'));\n});\n"],"sourceRoot":""}